{"version":3,"file":"leaflet-maptilersdk.js","sources":["../src/leaflet-maptilersdk.ts"],"sourcesContent":["import L from \"leaflet\";\nimport {\n  type HeatmapLayerOptions,\n  type LanguageInfo,\n  type MapStyleVariant,\n  type PointLayerOptions,\n  type PolygonLayerOptions,\n  type PolylineLayerOptions,\n  type ReferenceMapStyle,\n  type StyleSpecification,\n  type GeolocationType,\n  Map as MapSDK,\n  helpers,\n} from \"@maptiler/sdk\";\nimport { name, version } from \"../package.json\";\nexport { Language, MapStyle } from \"@maptiler/sdk\";\n\n/**\n * A Maptiler Layer for Leaflet consists in adding a MapTiler SDK Map\n * inside of Leaflet as a custom layer.\n */\ninterface MaptilerLayerInterface extends L.Layer {\n  /**\n   * Get the Maptiler Map instance out of the layer.\n   * This can be convenient to add further events and logic.\n   */\n  getMaptilerSDKMap: () => MapSDK;\n\n  /**\n   * Get the HTML Canvas element where the MapTiler Map is\n   * instantiated.\n   */\n  getCanvas: () => HTMLCanvasElement;\n\n  /**\n   * Set the style of the internal MapTiler Map instance.\n   * The style can be one of the built-in list (as in `MaptilerStyle`)\n   * or a raw URL.\n   */\n  setStyle: (s: null | ReferenceMapStyle | MapStyleVariant | StyleSpecification | string) => void;\n\n  /**\n   * Set the language of the map from the built-in list of\n   * supported languages (see `Language`)\n   */\n  setLanguage: (l: LanguageInfo | string) => void;\n\n  /**\n   * Add a heatmap layer from a geoJSON datasource or a\n   * dataset hosted on MapTiler Cloud account.\n   * Read more about helpers at\n   * https://github.com/maptiler/maptiler-sdk-js#vector-layer-helpers\n   */\n  addHeatmap: (options: HeatmapLayerOptions) => {\n    heatmapLayerId: string;\n    heatmapSourceId: string;\n  };\n\n  /**\n   * Add a polygon layer from a geoJSON datasource or a\n   * dataset hosted on MapTiler Cloud account.\n   * Read more about helpers at\n   * https://github.com/maptiler/maptiler-sdk-js#vector-layer-helpers\n   */\n  addPolygon: (options: PolygonLayerOptions) => {\n    polygonLayerId: string;\n    polygonOutlineLayerId: string;\n    polygonSourceId: string;\n  };\n\n  /**\n   * Add a point layer from a geoJSON datasource or a\n   * dataset hosted on MapTiler Cloud account.\n   * Read more about helpers at\n   * https://github.com/maptiler/maptiler-sdk-js#vector-layer-helpers\n   */\n  addPoint: (options: PointLayerOptions) => {\n    pointLayerId: string;\n    clusterLayerId: string;\n    labelLayerId: string;\n    pointSourceId: string;\n  };\n\n  /**\n   * Add a polyline layer from a geoJSON datasource or a\n   * dataset hosted on MapTiler Cloud account.\n   * Read more about helpers at\n   * https://github.com/maptiler/maptiler-sdk-js#vector-layer-helpers\n   */\n  addPolyline: (options: PolylineLayerOptions) => Promise<{\n    polylineLayerId: string;\n    polylineOutlineLayerId: string;\n    polylineSourceId: string;\n  }>;\n\n  /**\n   * Take a screenshot of the displayed map.\n   * Read more about this feature at\n   * https://github.com/maptiler/maptiler-sdk-js#take-screenshots-programmatically\n   */\n  takeScreenshot: (options?: {\n    download?: boolean;\n    filename?: string;\n  }) => Promise<Blob>;\n}\n\n/**\n * Options to create a MaptilerLayer\n */\nexport type MaptilerLayerOptions = {\n  /**\n   * Maptiler Cloud API key\n   */\n  apiKey: string;\n  /**\n   * Style hosted on MapTiler Cloud or raw URL.\n   * Default: MapTiler Streets style\n   */\n  style?: ReferenceMapStyle | MapStyleVariant | StyleSpecification | string;\n  /**\n   * Language for the map to display\n   * Default: uses the language as defined in the style\n   */\n  language?: LanguageInfo | string;\n\n  /**\n   * If the value is `true` or `\"POINT\"` then the positionning uses the MapTiler Cloud\n   * Geolocation to find the non-GPS location point.\n   *\n   * If the value is `\"COUNTRY\"` then the map is centered around the bounding box of the country.\n   *\n   * If the value is `false`, no geolocation is performed and the map centering and zooming depends on other options or on\n   * the built-in defaults.\n   *\n   * Default: `false`\n   */\n  geolocate?: (typeof GeolocationType)[keyof typeof GeolocationType] | boolean;\n};\n\n/**\n * A Maptiler Layer for Leaflet consists in adding a MapTiler SDK Map\n * inside of Leaflet as a custom layer.\n */\nexport const MaptilerLayer = L.Layer.extend({\n  options: {\n    updateInterval: 32,\n    // How much to extend the overlay view (relative to map size)\n    // e.g. 0.1 would be 10% of map view in each direction\n    padding: 0.1,\n    // whether or not to register the mouse and keyboard\n    // events on the maptiler sdk overlay\n    interactive: false,\n    // set the tilepane as the default pane to draw gl tiles\n    pane: \"tilePane\",\n  },\n\n  map: null,\n\n  initialize: function (options: unknown) {\n    L.setOptions(this, options);\n\n    // setup throttling the update event when panning\n    this._throttledUpdate = L.Util.throttle(this._update, this.options.updateInterval, this);\n  },\n\n  onAdd: function (map: L.Map) {\n    if (!this._container) {\n      this._initContainer();\n    }\n\n    const paneName = this.getPaneName();\n    map.getPane(paneName)?.appendChild(this._container);\n\n    this._initMaptilerSDK();\n\n    this._offset = this._map.containerPointToLayerPoint([0, 0]);\n\n    // work around https://github.com/mapbox/mapbox-gl-leaflet/issues/47\n    if (map.options.zoomAnimation) {\n      L.DomEvent.on(\n        // @ts-ignore\n        map._proxy,\n        L.DomUtil.TRANSITION_END,\n        this._transitionEnd,\n        this,\n      );\n    }\n\n    // Adding MapTiler attribution\n    map.attributionControl.addAttribution(\n      '\\u003ca href=\"https://www.maptiler.com/copyright/\" target=\"_blank\"\\u003e\\u0026copy; MapTiler\\u003c/a\\u003e \\u003ca href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\"\\u003e\\u0026copy; OpenStreetMap contributors\\u003c/a\\u003e',\n    );\n  },\n\n  onRemove: function (map: L.Map) {\n    if (this._map._proxy && this._map.options.zoomAnimation) {\n      L.DomEvent.off(this._map._proxy, L.DomUtil.TRANSITION_END, this._transitionEnd, this);\n    }\n    const paneName = this.getPaneName();\n    map.getPane(paneName)?.removeChild(this._container);\n\n    this._maptilerMap.remove();\n    this._maptilerMap = null;\n  },\n\n  getEvents: function () {\n    return {\n      move: this._throttledUpdate, // sensibly throttle updating while panning\n      zoomanim: this._animateZoom, // applys the zoom animation to the <canvas>\n      zoom: this._pinchZoom, // animate every zoom event for smoother pinch-zooming\n      zoomstart: this._zoomStart, // flag starting a zoom to disable panning\n      zoomend: this._zoomEnd,\n      resize: this._resize,\n    };\n  },\n\n  getMaptilerSDKMap: function (): MapSDK {\n    return this._maptilerMap;\n  },\n\n  getCanvas: function (): HTMLCanvasElement {\n    return this._maptilerMap.getCanvas();\n  },\n\n  getSize: function (): L.Point {\n    return (this._map as L.Map).getSize().multiplyBy(1 + this.options.padding * 2);\n  },\n\n  getBounds: function (): L.LatLngBounds {\n    const halfSize = this.getSize().multiplyBy(0.5);\n    const center = this._map.latLngToContainerPoint(this._map.getCenter());\n    return L.latLngBounds(\n      this._map.containerPointToLatLng(center.subtract(halfSize)),\n      this._map.containerPointToLatLng(center.add(halfSize)),\n    );\n  },\n\n  getContainer: function (): HTMLDivElement {\n    return this._container;\n  },\n\n  // returns the pane name set in options if it is a valid pane, defaults to tilePane\n  getPaneName: function (): string {\n    return this._map.getPane(this.options.pane) ? this.options.pane : \"tilePane\";\n  },\n\n  setStyle: function (s: null | ReferenceMapStyle | MapStyleVariant | StyleSpecification | string) {\n    this._maptilerMap.setStyle(s);\n  },\n\n  setLanguage: function (l: LanguageInfo | string) {\n    this._maptilerMap.setLanguage(l);\n  },\n\n  _roundPoint: (p: L.Point) => ({ x: Math.round(p.x), y: Math.round(p.y) }),\n\n  _initContainer: function () {\n    this._container = L.DomUtil.create(\"div\", \"leaflet-gl-layer\");\n\n    const size = this.getSize();\n    const offset = this._map.getSize().multiplyBy(this.options.padding);\n    this._container.style.width = `${size.x}px`;\n    this._container.style.height = `${size.y}px`;\n\n    const topLeft = (this._map as L.Map).containerPointToLayerPoint([0, 0]).subtract(offset);\n    L.DomUtil.setPosition(this._container, this._roundPoint(topLeft));\n  },\n\n  _initMaptilerSDK: function () {\n    const center = this._map.getCenter();\n    const options = {\n      ...this.options,\n      projection: \"mercator\",\n      container: this._container,\n      center: [center.lng, center.lat],\n      zoom: this._map.getZoom() - 1,\n      attributionControl: false,\n    };\n\n    // if the geolocate MapTiiler SDK option was given, then the center should be removed\n    if (this.options.geolocate) {\n      options.center = undefined;\n      options.zoom = undefined;\n    }\n\n    this._maptilerMap = new MapSDK(options);\n\n    this._maptilerMap.telemetry.registerModule(name, version);\n\n    this._maptilerMap.once(\"load\", () => {\n      this.fire(\"ready\");\n    });\n\n    this._maptilerMap.once(\"load\", async () => {\n      let tileJsonContent = { logo: null };\n\n      try {\n        const possibleSources = Object.keys(this._maptilerMap.style.sourceCaches)\n          .map((sourceName) => this._maptilerMap.getSource(sourceName))\n          .filter((s) => s && \"url\" in s && typeof s.url === \"string\" && s?.url.includes(\"tiles.json\"));\n\n        const styleUrl = new URL(possibleSources[0].url);\n\n        if (!styleUrl.searchParams.has(\"key\")) {\n          styleUrl.searchParams.append(\"key\", options.apiKey);\n        }\n\n        const tileJsonRes = await fetch(styleUrl.href);\n        tileJsonContent = await tileJsonRes.json();\n      } catch (e) {\n        // No tiles.json found (should not happen on maintained styles)\n      }\n\n      if (tileJsonContent.logo || options.maptilerLogo) {\n        const logoURL = tileJsonContent.logo ?? \"https://api.maptiler.com/resources/logo.svg\";\n\n        // Adding MapTiler logo + link\n        const maptilerLink = document.createElement(\"a\");\n        maptilerLink.href = \"https://www.maptiler.com\";\n        maptilerLink.style.setProperty(\"position\", \"absolute\");\n        maptilerLink.style.setProperty(\"left\", \"10px\");\n        maptilerLink.style.setProperty(\"bottom\", \"2px\");\n        maptilerLink.style.setProperty(\"z-index\", \"999\");\n        const maptilerLogo = document.createElement(\"img\");\n        maptilerLogo.src = logoURL;\n        maptilerLogo.alt = \"MapTiler logo\";\n        maptilerLogo.width = 100;\n        maptilerLogo.height = 30;\n        maptilerLink.appendChild(maptilerLogo);\n        this._map.getContainer().appendChild(maptilerLink);\n      }\n    });\n\n    this._maptilerMap.transform.freezeElevation = true;\n\n    // if the geolocate MapTiiler SDK option was given, then we need to propagate the actual center to Leaflet map\n    if (this.options.geolocate) {\n      this._maptilerMap.on(\"load\", () => {\n        this._map.setView(this._maptilerMap.getCenter(), this._maptilerMap.getZoom() + 1);\n      });\n    }\n\n    // allow GL base map to pan beyond min/max latitudes\n    this._transformGL();\n    this._maptilerMap._actualCanvas = this._maptilerMap._canvas;\n\n    // treat child <canvas> element like L.ImageOverlay\n    const canvas = this._maptilerMap._actualCanvas;\n    L.DomUtil.addClass(canvas, \"leaflet-image-layer\");\n    L.DomUtil.addClass(canvas, \"leaflet-zoom-animated\");\n    if (this.options.interactive) {\n      L.DomUtil.addClass(canvas, \"leaflet-interactive\");\n    }\n    if (this.options.className) {\n      L.DomUtil.addClass(canvas, this.options.className);\n    }\n\n    // Helper: heatmap\n    this.addHeatmap = (\n      options: HeatmapLayerOptions,\n    ): {\n      heatmapLayerId: string;\n      heatmapSourceId: string;\n    } => {\n      return helpers.addHeatmap(this._maptilerMap, options);\n    };\n\n    // Helper: polygon\n    this.addPolygon = (\n      options: PolygonLayerOptions,\n    ): {\n      polygonLayerId: string;\n      polygonOutlineLayerId: string;\n      polygonSourceId: string;\n    } => {\n      return helpers.addPolygon(this._maptilerMap, options);\n    };\n\n    // Helper: point\n    this.addPoint = (\n      options: PointLayerOptions,\n    ): {\n      pointLayerId: string;\n      clusterLayerId: string;\n      labelLayerId: string;\n      pointSourceId: string;\n    } => {\n      return helpers.addPoint(this._maptilerMap, options);\n    };\n\n    // Helper: polyline\n    this.addPolyline = (\n      options: PolylineLayerOptions,\n    ): Promise<{\n      polylineLayerId: string;\n      polylineOutlineLayerId: string;\n      polylineSourceId: string;\n    }> => {\n      return helpers.addPolyline(this._maptilerMap, options);\n    };\n\n    // Helper: sceenshot\n    this.takeScreenshot = (options?: {\n      download?: boolean;\n      filename?: string;\n    }): Promise<Blob> => {\n      return helpers.takeScreenshot(this._maptilerMap, options);\n    };\n  },\n\n  _update: function () {\n    // update the offset so we can correct for it later when we zoom\n    this._offset = this._map.containerPointToLayerPoint([0, 0]);\n\n    if (this._zooming) {\n      return;\n    }\n\n    const size = this.getSize();\n    const offset = this._map.getSize().multiplyBy(this.options.padding);\n    const topLeft = this._map.containerPointToLayerPoint([0, 0]).subtract(offset);\n\n    L.DomUtil.setPosition(this._container, this._roundPoint(topLeft));\n\n    this._transformGL();\n\n    if (this._maptilerMap.transform.width !== size.x || this._maptilerMap.transform.height !== size.y) {\n      this._container.style.width = `${size.x}px`;\n      this._container.style.height = `${size.y}px`;\n      if (this._maptilerMap._resize !== null && this._maptilerMap._resize !== undefined) {\n        this._maptilerMap._resize();\n      } else {\n        this._maptilerMap.resize();\n      }\n    } else {\n      // older versions of mapbox-gl surfaced update publicly\n      if (this._maptilerMap._update !== null && this._maptilerMap._update !== undefined) {\n        this._maptilerMap._update();\n      } else {\n        this._maptilerMap.update();\n      }\n    }\n  },\n\n  _transformGL: function () {\n    this._maptilerMap.setCenter(this._map.getCenter());\n    this._maptilerMap.setZoom(this._map.getZoom() - 1);\n  },\n\n  // update the map constantly during a pinch zoom\n  _pinchZoom: function () {\n    this._maptilerMap.jumpTo({\n      zoom: this._map.getZoom() - 1,\n      center: this._map.getCenter(),\n    });\n  },\n\n  // borrowed from L.ImageOverlay\n  // https://github.com/Leaflet/Leaflet/blob/master/src/layer/ImageOverlay.js#L139-L144\n  _animateZoom: function (e: L.ZoomAnimEvent) {\n    const scale = this._map.getZoomScale(e.zoom);\n    const padding = this._map.getSize().multiplyBy(this.options.padding * scale);\n    const viewHalf = this.getSize()._divideBy(2);\n    // corrections for padding (scaled), adapted from\n    // https://github.com/Leaflet/Leaflet/blob/master/src/map/Map.js#L1490-L1508\n    const topLeft = this._map\n      .project(e.center, e.zoom)\n      ._subtract(viewHalf)\n      ._add(this._map._getMapPanePos().add(padding))\n      ._round();\n    const offset = this._map.project(this._map.getBounds().getNorthWest(), e.zoom)._subtract(topLeft);\n\n    L.DomUtil.setTransform(this._maptilerMap.getCanvas(), offset.subtract(this._offset), scale);\n  },\n\n  _zoomStart: function () {\n    this._zooming = true;\n  },\n\n  _zoomEnd: function () {\n    const scale = this._map.getZoomScale(this._map.getZoom());\n\n    L.DomUtil.setTransform(\n      this._maptilerMap.getCanvas(),\n      // https://github.com/mapbox/mapbox-gl-leaflet/pull/130\n      new L.Point(0, 0),\n      scale,\n    );\n\n    this._zooming = false;\n    this._update();\n  },\n\n  _transitionEnd: function () {\n    L.Util.requestAnimFrame(() => {\n      const zoom = this._map.getZoom();\n      const center = this._map.getCenter();\n      const offset = this._map.latLngToContainerPoint(this._map.getBounds().getNorthWest());\n\n      // reset the scale and offset\n      L.DomUtil.setTransform(this._maptilerMap._actualCanvas, offset, 1);\n\n      // enable panning once the gl map is ready again\n      this._maptilerMap.once(\n        \"moveend\",\n        L.Util.bind(() => {\n          this._zoomEnd();\n        }, this),\n      );\n\n      // update the map position\n      this._maptilerMap.jumpTo({\n        center: center,\n        zoom: zoom - 1,\n      });\n    }, this);\n  },\n\n  // @ts-ignore\n  _resize: function (e) {\n    this._transitionEnd(e);\n  },\n}) as {\n  new (options: MaptilerLayerOptions): MaptilerLayerInterface;\n} & Omit<typeof L.Layer, \"prototype\">;\n\n/**\n * Factory function to instantiate a MaptilerLayer.\n * Does exactly the same as calling `new MaptilerLayer(options)`\n */\nexport function maptilerLayer(options: MaptilerLayerOptions) {\n  return new MaptilerLayer(options);\n}\n"],"names":["MaptilerLayer","L","options","map","paneName","_a","halfSize","center","s","l","p","size","offset","topLeft","MapSDK","name","version","tileJsonContent","possibleSources","sourceName","styleUrl","logoURL","maptilerLink","maptilerLogo","canvas","helpers","e","scale","padding","viewHalf","zoom","maptilerLayer"],"mappings":"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"}